DONE

	Next step is to formalize callbacks into a struct passed in to server create.

	This way we avoid silly commands and delays.

	Implement a config option to force passthrough direct.

	Implement passthrough direct client -> server.

	Implement passthrough direct server -> client.

	Verified that force passthrough direct is working :)

TODO

	-------------

	Then create a new callback when a session changes route.

	We can use this callback to look up the slot for the client address, it will need to use the session map to look it up from address.

	Then we can set the "next" flag appropriately in the slot thread data under mutex.

	This way we can dynamically shunt threads through next, only when the session is on next, and then when direct, do them via passthrough server -> client.

	--------------



















	--------------

	There will need to be adjustments made to the chonkle and pittle by the proxy, in both directions, to make sure they pass the advanced packet filter. FML.

	--------------

	Verify that network next acceleration works through the proxy.

	--------------

	Load test again in google, to make sure nothing has broken.

	Setup a relay in GCore ashburn datacenter (10G).

	Setup a client, server and proxy in GCore (10G).

	Load test in GCore.

	Work on proxy is done :)

	--------------

	Backport the client ready change to SDK4.

	Backport the client ready change to the func client, to avoid heisenbugs losing the first packet.

	--------------
