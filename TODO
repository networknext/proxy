DONE

	Implement the proxy to act as a packet reflector (eg. send packet back to sender, initially...)

	Gotta do that thing on linux to fix the socket buffer sizes etc, eg. especially do a script

	Setup bootstrap.sh

	Setup so that the proxy by default looks up the number of cores in linux, and creates that many threads.

	Setup a new google cloud project "proxy"

	Inside the "proxy" google cloud project, setup a VM with latest machine type with max cores and high perf io.

	Run the proxy. Verify it picks up all cores :)

TODO

	---------

	Setup a go client to send UDP packets, receive them, and count how many received. Zero deps.

	---------

	Setup a managed instance group that manually scales up/down.

	---------

	Implement basic throughput test in google cloud. How far can I push it?

	---------












	---------

	Implement env var overrides

		bind address, 

		socket buffer sizes, 

		num threads, 

		thread data bytes

	Print out config on start.

	--------

	Implement basic throughput test in bare metal.

	Integrate network next server into thread data. Will involve adjusting the SDK so that I can take over packet send/receive on behalf of server, and insert received packets directly into the SDK, and hook a callback for send packets...

	Setup client, proxy, server in google cloud and test throughput.

	Test throughput in GCore bare metal ashburn.

	Done.

	----------
